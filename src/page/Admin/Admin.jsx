import { useEffect, useState } from "react";
import style from "./Admin.module.css";
import axios from "axios";
import SideBar from "../../components/sideBar/SideBar";
import { Swiper, SwiperSlide } from "swiper/react";
import Modal from "./modal/Modal";

// Import Swiper styles
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";

import "../../page/Booking/Sliders/styles.css";
import { Link } from "react-router-dom";

// import required modules
import { Navigation, Pagination, Mousewheel, Keyboard } from "swiper/modules";
import { url } from "../../constants/constants";

import { useNavigate } from "react-router-dom";
import { useCallback } from "react";
import useAdminStore from "../../store/adminStore";

export const useLogoutAdmin = () => {
  const navigate = useNavigate();

  const handleLogout = () => {
    document.cookie =
      "accesstoken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    localStorage.removeItem("userRole");
    navigate("/");
  };

  return handleLogout;
};
function AddRooms() {
  const [file, setFile] = useState(null);
  const [roomsImg, setRoomsImg] = useState([]);
  const [data, setData] = useState();
  const [pictures, setPictures] = useState();
  // const [orders, setOrders] = useState([]);
  const [queryParams, setQueryParams] = useState({});
  const [timeStart, setTimeStart] = useState("");
  const [timeEnd, setTimeEnd] = useState("");
  const [orderId, setOrderId] = useState("");
  const { rooms, orders, fetchRooms, deleteRoom, fetchOrders } =
    useAdminStore();

  useEffect(() => {
    fetchRooms();
    fetchOrders();
  }, []);

  // const fetchRooms = async () => {
  //   try {
  //     const response = await axios.get(`${url}/room/get-all-rooms`, {
  //       withCredentials: true,
  //     });
  //     setRooms(response.data);
  //   } catch (error) {
  //     console.log("Error fetching rooms:", error);
  //   }
  // };

  // const deleteRoom = async (id) => {
  //   try {
  //     await axios.delete(`${url}/room/delete-room/${id}`, {
  //       withCredentials: true,
  //     });
  //     console.log("Room deleted successfully! üòä");
  //     // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  //     fetchRooms();
  //   } catch (error) {
  //     console.log("Error:", error);
  //     // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  //   }
  // };
  const deleteOrder = async (id) => {
    try {
      await axios.delete(`${url}/order/delete-order/${id}`, {
        withCredentials: true,
      });
      console.log("Order deleted successfully! üòä");
    } catch (error) {
      console.log("Error:", error);
      // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    }
  };

  const uploadFile = (event) => {
    setFile(event.target.files[0]);
  };

  const updatePictureList = () => {
    // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ `pictures`, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
    setPictures(data?.picture);
  };
  const handleFileChanges = async (id) => {
    const formData = new FormData();
    formData.append("image", file);

    try {
      // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
      await axios.post(`${url}/room/upload-picture/${id}`, formData, {
        withCredentials: true,
        headers: { "Content-Type": "multipart/form-data" },
      });

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
      const updatedRoomResponse = await axios.get(
        `${url}/room/get-room/${id}`,
        {
          withCredentials: true,
        }
      );

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç—ã
      setRoomsImg((prevRooms) =>
        prevRooms.map((room) =>
          room.id === id
            ? { ...room, picture: updatedRoomResponse.data.picture }
            : room
        )
      );

      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–∞
      setFile(null);
    } catch (error) {
      console.log("Error:", error);
    }
  };
  // Define the variable

  useEffect(() => {
    fetchOrders();
  }, []);

  // const fetchOrders = useCallback(async () => {
  //   try {
  //     const response = await axios.get(`${url}/order/get-all-orders`, {
  //       params: queryParams,
  //       withCredentials: true,
  //     });
  //     setOrders(response.data);
  //   } catch (error) {
  //     console.error("Error fetching orders:", error);
  //   }
  // }, [queryParams]);

  useEffect(() => {
    fetchOrders();
    const intervalId = setInterval(fetchOrders, 5000); // Fetch orders every 5 seconds

    return () => clearInterval(intervalId); // Clean up on component unmount
  }, [fetchOrders]);

  const handleFilterChange = (filter, value) => {
    setQueryParams((prevParams) => {
      const newParams = { ...prevParams };

      if (newParams[filter] === value) {
        // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
        delete newParams[filter];
      } else {
        // –ò–Ω–∞—á–µ, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        newParams[filter] = value;
      }

      return newParams;
    });
  };

  // const handleFilterReset = () => {
  //   setQueryParams({});
  //   fetchOrders(); // –í—ã–ø–æ–ª–Ω–∏—Ç—å GET-–∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  // };

  const handleApplyFilter = () => {
    fetchOrders(); // –í—ã–ø–æ–ª–Ω–∏—Ç—å GET-–∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
  };

  const handleUpdateOrder = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.put(
        `${url}/order/update-order/${id}`,
        {
          timeStart,
          timeEnd,
        },
        {
          withCredentials: true,
        }
      );

      console.log(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleLogout = useLogoutAdmin();

  return (
    <div className={style.Admin}>
      <div>
        <div className={style.sideNavContainer}>
          <Link to="/CreateRooms">–°–æ–∑–¥–∞–Ω–∏–µ –ö–æ–º–∞–Ω—Ç—ã</Link>
          <Link to="/Admin">–°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç</Link>
          <Link to="/DeleteImage">–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</Link>
          <button onClick={handleLogout}>–í—ã–π—Ç–∏</button>
        </div>
      </div>
      <div className={style.allRooms}>
        <div className={style.allRoomsContainer}>
          <h1
            style={{
              display: "flex",
              justifyContent: "center",
              fontSize: "30px",
              paddingBottom: "30px",
            }}
          >
            –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
          </h1>
          {rooms?.map((data) => {
            return (
              <div className={style.Rooms} key={data.id}>
                <div className={style.roomSwiper}>
                  <Swiper
                    slidesPerView={1}
                    spaceBetween={30}
                    loop={true}
                    pagination={{
                      clickable: true,
                    }}
                    navigation={true}
                    modules={[Pagination, Navigation]}
                    className="mySwiper"
                  >
                    {data?.picture?.map((img) => {
                      const imgBlob = new Blob([img.data]);
                      return (
                        <SwiperSlide key={img.id}>
                          <img src={`${url}/${img.name}`} />
                        </SwiperSlide>
                      );
                    })}
                  </Swiper>
                </div>
                <div className={style.roomInfo}>
                  <div>
                    <p>–ö–æ–¥:{data.id}</p>
                    <p>–ê–¥—Ä–µ—Å:</p>
                    <h2>{data.address}</h2>
                  </div>

                  <div>
                    <p>–ù–∞–∑–≤–∞–Ω–∏–µ:</p>
                    <h2>{data.name}</h2>
                  </div>
                  <div>
                    <p>–û–ø–∏—Å–∞–Ω–∏–µ:</p>
                    <h2>{data.description}</h2>
                  </div>
                  <h2>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç {data.places}</h2>
                  <h2>–¶–µ–Ω–∞ {data.price}—Ä</h2>
                  <div className={style.uploads}>
                    <h2>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ:</h2>
                    <input type="file" onChange={uploadFile} name="inputFile" />
                    <button onClick={(e) => handleFileChanges(data.id)}>
                      –ó–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                  </div>
                  <div className={style.deleteRoom}>
                    <h2>–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É</h2>
                    <button onClick={(e) => deleteRoom(data.id)}>
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
          <div className={style.orders}>
            <h1
              style={{
                display: "flex",
                justifyContent: "center",
                fontSize: "30px",
                padding: "30px",
              }}
            >
              –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π
            </h1>

            <div className={style.filter}>
              <div className={style.filterItem}>
                <h1
                  style={{
                    display: "flex",
                    justifyContent: "center",
                    fontSize: "30px",
                  }}
                >
                  –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:
                </h1>
                <label>
                  <input
                    className={style.checkbox}
                    type="checkbox"
                    checked={queryParams.time === "DECREASING"}
                    onChange={() => handleFilterChange("time", "DECREASING")}
                  />
                  –í—Ä–µ–º—è –ø–æ —É–±—ã–≤–∞–Ω–∏—é
                </label>
                <label>
                  <input
                    className={style.checkbox}
                    type="checkbox"
                    checked={queryParams.time === "INCREASING"}
                    onChange={() => handleFilterChange("time", "INCREASING")}
                  />
                  –í—Ä–µ–º—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
                </label>
                <input
                  className={style.filterInput}
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã"
                  value={queryParams.roomId || ""}
                  onChange={(e) => handleFilterChange("roomId", e.target.value)}
                />
              </div>
              {/* <button onClick={handleFilterReset}>–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä</button> */}
              <button onClick={handleApplyFilter}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä</button>
            </div>
            <table>
              <thead>
                <tr>
                  <th>–§–ò–û</th>
                  <th>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</th>
                  <th>Email</th>
                  <th>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</th>
                  <th>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è</th>
                  <th>–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã</th>
                  <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                </tr>
              </thead>
              <tbody>
                {orders?.map((item) => {
                  const formatDate = (dateString) => {
                    const formatDate = (dateString) => {
                      const date = new Date(dateString);
                      const options = {
                        hour: "2-digit",
                        minute: "2-digit",
                        timeZone: "UTC",
                      };
                      return `–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${date.toLocaleTimeString(
                        "ru-RU",
                        options
                      )}`;
                    };
                  };

                  const formatDates = (dateString) => {
                    const date = new Date(dateString);
                    const options = {
                      day: "2-digit",
                      month: "2-digit",
                      year: "numeric",
                      hour: "2-digit",
                      minute: "2-digit",
                      timeZone: "UTC",
                    };
                    const formattedDates = date.toLocaleDateString(
                      "ru-RU",
                      options
                    );
                    const formattedTime = date.toLocaleTimeString("ru-RU", {
                      hour: "2-digit",
                      minute: "2-digit",
                      timeZone: "UTC",
                    });
                    return `–î–∞—Ç–∞ ${formattedDates}\n–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${formattedTime}`;
                  };
                  const formattedTimeEnd = formatDates(item.timeEnd);
                  const formattedStart = formatDates(item.timeStart);

                  return (
                    <tr key={item.id}>
                      <td>{item.fio}</td>
                      <td>{item.phoneNumber}</td>
                      <td>{item.email}</td>
                      <td>{formattedStart}</td>
                      <td>{formattedTimeEnd}</td>
                      <td>–ö–æ–º–Ω–∞—Ç–∞ –Ω–æ–º–µ—Ä : {item.roomId}</td>
                      <td style={{ display: "flex", gap: "10px" }}>
                        <button
                          style={{
                            width: "150px",
                            padding: "10px",
                            fontSize: "15px",
                          }}
                          onClick={(e) => deleteOrder(item.id)}
                        >
                          –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω—å
                        </button>
                        <Modal id={item.id} />
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}

export default AddRooms;
